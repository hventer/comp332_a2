[0m[[0m[0minfo[0m] [0m[0m[32mSyntaxAnalysisTests in extras/src/test/scala/webcpl:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an identifier of one letter produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an identifier as an identifier produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an identifier containing digits and underscores[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an integer as an identifier gives an error[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a non-identifier as an identifier gives an error (digit)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a non-identifier as an identifier gives an error (underscore)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a keyword as an identifier gives an error[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a keyword prefix as an identifier produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a decimal constant of one digit produces the correct integer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a decimal constant produces the correct integer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a decimal constant with underscores[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a hex constant produces the correct integer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing #xFFFFFFFF produces the integer -1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing #x80000000 produces the integer -2147483648[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing #x_DeadC0de produces the integer -559038242[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a non-integer as an integer gives an error[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing string constant with BCPL style escapes[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing incorrect unicode escape fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing unicode escape with invalid codepoint fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing string constant with unicode escape[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing unicode character constant from higher plane[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing incorrect hex ASCII escape fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing hex ASCII escapes in a string[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing incorrect octal ASCII escape fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing of string constants ignores * fenced whitespace[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing line end character in string literal fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing of empty character literal fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing of * fenced whitespace in character literal fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing unterminated character literal fails (1)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing character literal encompassing end of line fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing character literal interrupted by end of input fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'TRUE'[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'FALSE'[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'GLOBAL' declaration with no entries should fail[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'GLOBAL' declaration with a single entry[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing simple 'GLOBAL' declaration[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'GLOBAL' declaration with EOL separator[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'GLOBAL' declaration with missing initialisers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'STATIC' declaration with no entries should fail[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'STATIC' declaration with a single entry[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing simple 'STATIC' declaration[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'STATIC' declaration with EOL separator[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'STATIC' declaration with missing initialisers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'MANIFEST' declaration with no entries should fail[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'MANIFEST' declaration with a single entry[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing simple 'MANIFEST' declaration[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'MANIFEST' declaration with EOL separator[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing 'MANIFEST' declaration with missing initialisers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse of variable declaration without initialiser should fail[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse of variable declaration without equals should fail[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse declaration of a single variable[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse declaration of two variables[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse declaration of four variables[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse of vector declaration missing equals fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse of vector declaration missing size expression fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse simple vector declaration[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse vector declaration with size given by manifest constant[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a function declaration without equals fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a function declaration without defining expression fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse a function declaration with no formal parameters[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse a function declaration with a single formal parameter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse a function declaration with multiple parameters[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a procedure declaration without `BE` fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a procudere declaration without defining statement fails[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse a procedure declaration with no formal parameters[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse a procedure declaration with a single formal parameter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse a procedure declaration with multiple parameters[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse `LET` declaration with single `AND` clause[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse a more complex `LET` declaration with `AND` clauses[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse simple function call with no argument[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse simple function call with one argument[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse simple function call with more than one argument[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing function call with missing argument causes an error[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parse of an iterated function call associates to the left[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a single relation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a sequence of two relations[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a sequence of three relations[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a sequence of four relations[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- ternary with parentheses on right A -> B, (C -> D, E)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- ternary with parentheses in middle A -> (B -> C, D), E)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- XOR[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- EQV[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- OR[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- OR Associativity[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- AND[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- AND Associativity[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- NOT something[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- BitShift Left[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- BitShift Left Associativity[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- BitShift Right[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- BitShift Right Associativity[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- address expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- + is left associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- - is left associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- - and + are left associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- * is left associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- / is left associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- / and * are left associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- + has lower precedence than * (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- - has lower precedence than * (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- + has lower precedence than * (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- - has lower precedence than * (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- + has lower precedence than / (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- - has lower precedence than / (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- + has lower precedence than / (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- - has lower precedence than / (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than * (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than * (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than * (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than * (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than / (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than / (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than / (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than / (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than + (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than + (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than + (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than + (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than - (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than - (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- = has lower precedence than - (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- < has lower precedence than - (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence than = (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence than = (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence that < (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence that < (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence than + (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence than + (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence than - (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has higher precedence than - (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has lower precedence than * (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- unary - has lower precedence than / (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an equal expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a less than expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an addition expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a subtraction expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a multiplication expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a division expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an integer expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing an identifier expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parsing a parenthesized expression produces the correct tree[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parentheses override precedence (to left)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parentheses override precedence (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parentheses override associativity in expressions[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parentheses disambiguate non-associativity (to right)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- parentheses disambiguate non-associativity (to left)[0m[0m
